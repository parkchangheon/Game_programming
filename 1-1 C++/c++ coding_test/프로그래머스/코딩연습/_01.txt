#include<iostream>
#include <string>
#include <vector>
#include<sstream>
#include<numeric>
using namespace std;
vector<string> split(string& s, string token);

vector<int> solution(vector<string> purchase) {
	vector<int> answer;
	int result[5] = { 0, };
	int arr[365] = { 0, };
	int sub_total = 0;
	int day = 0;
	int remain[365] = { 0, };
	for (string s : purchase)
	{
		vector<string> parsed = split(s, " ");

		string date = parsed[0];
		int price = stoi(parsed[1]);

		vector<string>md = split(date, "/");
		int mm = stoi(md[1]);
		int dd = stoi(md[2]);

		if (mm == 1)
		{
			arr[dd]=price;
		}
		else if (mm == 2) {
			arr[31+dd] = price;
		}

		else if (mm == 3) {
			arr[59 + dd] = price;
		}

		else if (mm == 4) {
			arr[90 + dd] = price;
		}

		else if (mm == 5) {
			arr[120 + dd] = price;
		}

		else if (mm == 6) {
			arr[151 + dd] = price;
		}

		else if (mm == 7) {
			arr[181 + dd] = price;
		}

		else if (mm == 8) {
			arr[212 + dd] = price;
		}

		else if (mm == 9) {
			arr[243 + dd] = price;
		}

		else if (mm == 10) {
			arr[273 + dd] = price;
		}

		else if (mm == 11) {
			arr[304 + dd] = price;
		}

		else if (mm == 12) {
			arr[334 + dd] = price;
		}
		
	}



	while (day < 365) {

		if (arr[day] != 0)
		{
			sub_total += arr[day];
		}
		

		for (int i = 0; i <= day; i++)
		{
			if (arr[i] != 0)
			{
				if (remain[i] > 30)
				{
					sub_total -= arr[i];
					remain[i] = 0;
					arr[i] = 0;
					break;
				}

				remain[i] += 1;
			}
		}


		if (sub_total >= 0 && sub_total < 10000)
		{
			result[0] += 1;
		}

		else if (sub_total >= 10000 && sub_total < 20000)
		{
			result[1] += 1;
		}

		else if (sub_total >= 20000 && sub_total < 50000)
		{
			result[2] += 1;
		}

		else if (sub_total >= 50000 && sub_total < 100000)
		{
			result[3] += 1;
		}

		else if(sub_total>=100000)
		{
			result[4] += 1;
		}

		day += 1;
	}

	for (int i = 0; i < 5; i++)
	{
		cout << result[i]<<" ";
		answer.push_back(result[i]);
	}

	return answer;
}



vector<string> split(string& s, string token) {
	vector<string> stringList;

	int searchPoint = 0;
	while (true) {
		int searchResult = s.find(token, searchPoint);

		stringList.push_back(s.substr(searchPoint, searchResult - searchPoint));
		searchPoint = searchResult + 1;
	
		if (searchResult == string::npos) {
			break;
		}
	}
	stringList;
	return stringList;
}

int main()
{
	vector<string> v = { "2019/01/01 5000", "2019/01/20 15000", "2019/02/09 90000" };
	solution(v);

	
}