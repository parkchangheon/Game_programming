// 1326번

#include<iostream>
using namespace std;
int* arr;
int* check;
int a, b;
int n;
int result = 9999999;

int DFS(int start, int count) {

	if (arr[start] = arr[b])
	{
		if (count < result) {
			result = count;
			return count;
		}
		else
			return -1;
	}
		

	if (start<1 || start>n) {
		return -1;
	}
	else {
		if (check[start] == 1)
			return -1;
		else {
			for (int i = start+arr[start]; i < n + 1; i += arr[start])
			{
				DFS(i, count + 1);
			}

			for (int i = start - arr[start]; i > 0; i -= arr[start])
			{
				DFS(i, count + 1);
			}
		}


	}


}


int main() {
	
	int count = 0;
	
	cin >> n;

	arr = new int[n+1];
	check = new int[n+1]{ 0, };
	for (int i = 1; i < n + 1; i++) {
		cin >> arr[i];
	}

	cin >> a >> b;
	if (a > n || b > n || a < 1 || b < 1)
		cin >> a >> b;
	else {
		if (a == 1)
		{
			count = 1;
			cout << count;
		}
			
		else
		{
			DFS(a,count);
			cout << result;
		}

	}
	

}


===============================================================


#include<iostream>
#include<queue>
using namespace std;

queue<pair<int, int>>q;
int start, ed, jump[10001], n, vis[10001], swc, res;

int main() {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> jump[i];
	}

	cin >> start;
	cin >> ed;
	q.push(make_pair(start, 0)); // 시작점과 카운트한 횟수
	vis[start] = 1;

	while (!q.empty()) {

		// 먼저 조건 완료 선언부
		if (q.front().first == ed) {
			res = q.front().second;
			swc = 1; // 목표 지점에 도달하면 1, 못하면 0이 되어 -1을 출력시킴.
			break;
		}

		int now = q.front().first;
		int cnt = q.front().second;

		q.pop();
		for (int i = 1; now + (jump[now] * i) <= n; i++) {
			int next = now + jump[now] * i;
			if (vis[next] == 0) {
				vis[next] = 1;
				q.push(make_pair(next, cnt + 1));
			}
		}

		for (int i = 1; now - (jump[now] * i) >= 1; i++) {
			int next = now - jump[now] * i;
			if (vis[next] == 0) {
				vis[next] = 1;
				q.push(make_pair(next, cnt + 1));
			}
		}
	}
	if (swc == 0) {
		cout << -1;
	}
	else
		cout << res;



}