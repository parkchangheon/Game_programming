/*
#include<iostream>

using namespace std;

class Circle {
	int radius;

public:
	Circle() { radius = 1; }
	Circle(int r) { radius = r; }

	double getArea(int radius) {
		return 3.14 * radius * radius;
	}

};



int main() {

	int* pInt = new int;
	char* pChar = new char;
	Circle* pCircle = new Circle();

	delete pInt;
	delete pChar;
	delete pCircle;

	int* p = new int;
	// 만약 힙에 메모리가 부족하면, new 는 NULL을 리턴해서, new 의 리턴값이 NULL인지 검사하는 과정.

	if (!p) {
		return;
	}

	*p = 5; // 할당받은 정수 공간에 5기록
	int n = *p; //할당 받은 정수 공간에서 값읽기 n=5;
	delete p; // 메모리 반환




}




int main() {
	int* pInt = new int(20); // 20으로 초기화된 int 공간할당.
	char* pChar = new char('a'); // 'a'로 초기화된 char 공간 할당


}


*/





/*
#include<iostream>
using namespace std;

int main() {

	int* p;

	p = new int; // 동적할당

	if (!p) {
		cout << "메모리 할당할 수 없습니다.";
		return 0;
	}

	*p = 5;
	int n = *p;
	cout << "*p=" << *p << endl;
	cout << "n=" << n << endl;

	delete p;



}





#include<iostream>
using namespace std;

int main() {
	int* p = new int[5];

	if (!p) {
		return 0;
	}

	for (int i = 0; i < 5; i++) {
		p[i] = i;
	}

	delete []p;

}

*/



//정수형 배열의 동적할당 및 반환

//#include<iostream>
//using namespace std;
//
//int main() {
//	cout << "입력할 정수 갯수 : ";
//	int n;
//	cin >> n;
//	if (n <= 0)
//		return 0;
//
//	int* p = new int[n];
//	if (!p) {
//		cout << "메모리를 할당할 수 없습니다.";
//		return 0;
//	}
//
//	for (int i = 0; i < n; i++) {
//		cout << i + 1 << " 번째 정수";
//		cin >> p[i];
//	}
//
//	int sum = 0;
//	for (int i = 0; i < n; i++)
//		sum += p[i];
//	cout << "평균 = " << sum / n << endl;
//
//	delete[]p;
//}
//





//#include<iostream>
//using namespace std;
//
//int main() {
//
//	int* pArray = new int[] {1, 2, 3, 4};
//	for (int i = 0; i < 4; i++) {
//		cout << (*pArray + i) << endl;
//	}
//
//	return 0;
//}
//
//



/*
#include<iostream>
using namespace std;

int main() {

	double* p = new double(3.14);
	cout << *p<<endl;

	int* arr = new int[5];
	
	for (int i = 0; i < 5; i++) {
		cin >> arr[i];
	}

	for (int i = 0; i < 5; i++) {
		cout << arr[i]<<' ';
	}

	delete p;
	delete[]arr;

}







#include<iostream>
using namespace std;

class Circle {
	int radius;

public:
	Circle();
	Circle(int r);
	~Circle();
	void setRadius(int r) { radius = r; }
	double getArea() { return 3.14 * radius * radius; }

};

Circle::Circle() {
	radius = 1;
	cout << "생성자 실행 radius = " << radius << endl;
}

Circle::Circle(int r) {
	radius = r;
	cout << "생성자 실행 radius = " << radius << endl;
}

Circle::~Circle() {
	radius = 1;
	cout << "소멸자 실행 radius = " << radius << endl;
}


int main() {

	Circle* p, * q;
	p = new Circle;
	q = new Circle(30);

	cout << p->getArea() << endl << q->getArea() << endl;

	delete p;
	delete q;


}








#include<iostream>
using namespace std;

class Circle {
	int radius;

public:
	Circle();
	Circle(int r);
	~Circle();
	void setRadius(int r) { radius = r; }
	double getArea() { return 3.14 * radius * radius; }

};

Circle::Circle() {
	radius = 1;
	cout << "생성자 실행 radius = " << radius << endl;
}

Circle::Circle(int r) {
	radius = r;
	cout << "생성자 실행 radius = " << radius << endl;
}

Circle::~Circle() {
	radius = 1;
	cout << "소멸자 실행 radius = " << radius << endl;
}


int main()
{
	Circle* pArray = new Circle[3]{ Circle(1),Circle(2),Circle(3) };

	pArray[0].setRadius(10);

	for (int i = 0; i < 3; i++)
	{
		cout << pArray[i].getArea() << endl; // 여기서 pArray[i] 말고도 (pArray+i)로 작성해도 좋다.
	}
	delete[]pArray;
}


*/


/*

#include<iostream>
using namespace std;

class Circle {
	int radius;
public:
	Circle();
	Circle(int r);
	~Circle();

	double getArea();
	void setRadius(int r);
};

Circle::Circle() {
	radius = 1;
}

Circle::Circle(int r) {
	radius = r;
}

Circle::~Circle() {
	cout<< "소멸자 실행";
}


double Circle::getArea() {
	return 3.14 * radius * radius;
}

void Circle::setRadius(int r) {
	this->radius = r;
}


int main() {
	int n;
	cout << "원의 갯수를 입력해주세요 : ";
	cin >> n;
	int count = 0;


	Circle* p = new Circle[n];

	for (int i = 0; i < n; i++)
	{
		int rad;
		cout << "입력" << i+1 << " : ";
		cin >> rad;
		p[i].setRadius(rad);	
		cout << endl;
	}


	for (int i = 0; i < n; i++) {
		cout << p[i].getArea() << endl;
		if (p[i].getArea() > 100 && p[i].getArea() < 200) {
			count++;
		}

	}
	cout << endl;
	
	cout << "총 부합 원은 : " << count << "입니다."<<endl;

	delete []p; // 일반적으로 delete 해주는게 좋긴하지만, 

}

*/
